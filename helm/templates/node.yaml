apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.network }}-node
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.network }}-node
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.network }}-database
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.storage.database.dynamic.size }}
      {{- if .Values.storage.database.useDynamicProvisioning }}
      storageClassName: {{ .Values.storage.database.dynamic.storageClassName }}
      {{- else }}
      storageClassName: {{ .Values.storage.database.fixed.storageClassName }}
      selector:
        matchLabels:
          storagetype: database
      {{- end }}
  template:
    metadata:
      labels:
        app: {{ .Values.network }}-node
    spec:
      volumes:
      - name: secret-ca
        secret:
          secretName: {{ .Values.network }}-ca
          defaultMode: 420
      containers:
      - name: chia
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
      ports:
      - name: peers
        containerPort: {{ .Values.ports.nodePeers }}
        protocol: TCP
      - name: rpc
        containerPort: {{ .Values.ports.nodeRpc }}
        protocol: TCP
      env:
      - name: service
        value: node
      - name: keys
        value: none
      {{ include "chia.commonEnv" . | nindent 6 }}
      volumeMounts:
      - name: secret-ca
        mountPath: /chia-ca
      - name: {{ .Values.network }}-database
        mountPath: /chia-data/db
      imagePullPolicy: Always
      restartPolicy: Always

